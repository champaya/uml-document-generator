export const markdownPrompt = `
# 指示
出力要件に従って、入力コードをマークダウン形式のドキュメントに変換してください。

# 出力要件
以下のテンプレートに沿った形式のマークダウンドキュメントを生成すること。

# テンプレート開始

# コンポーネント設計書

## 1. コンポーネント概要
- **コンポーネント名**: 
- **概要**: 
  - コンポーネントの目的や役割を簡潔に記述します。

## 2. Props定義
| 名前 | 型 | 説明 |
|------|-----|------|
| propName1 | 型 | propの説明1 |
| propName2 | 型 | propの説明2 |
| なし | なし | このコンポーネントはPropsを受け取らない。 |
| ... | ... | ... |

## 3. Reactive State定義
| 名前 | 型 | 説明 |
|------|-----|------|
| stateName1 | 型 | stateの説明1 |
| stateName2 | 型 | stateの説明2 |
| なし | なし | このコンポーネントはReactive Stateを持たない。 |
| ... | ... |

## 4. メソッド / 関数
### メソッド / 関数名
- **概要**: メソッドや関数の役割を説明します。
- **引数**:
  - \`arg1\`: 型 - 説明
  - \`arg2\`: 型 - 説明
- **戻り値**: 型 - 説明

## 5. ライフサイクルフック
- **onMounted**:
  - **目的**: コンポーネントがマウントされた後の処理内容を記述します。
- **onUnmounted**:
  - **目的**: コンポーネントがアンマウントされる前の処理内容を記述します。
- **その他のフック**:
  - 使用しているフックとその目的を記述します（例: \`watch\`, \`computed\` など）。

## 6. イベントハンドラ
| イベント名 | ハンドラ名 | 説明 |
|------------|------------|------|
| onClick | handleClick | クリック時の処理 |
| onChange | handleChange | 変更時の処理 |
| ... | ... | ... |

## 7. コンポジションロジック
- **setup関数**:
  - **概要**: コンポーネントのセットアップロジックを記述します。
  - **返却値**: テンプレートで使用する変数や関数を記述します。

## 8. レンダリング
初期処理について詳細に記述します。
**例**
1. onMountedフック内でAPIリクエストを送信する。
2. レスポンスが成功した場合、取得したデータをReactive Stateに保存。
3. もしレスポンスが失敗した場合、エラーメッセージを表示。
4. 取得したデータに基づいて、リストをforEachで反復処理して表示。

## 9. 使用ライブラリ / モジュール
- **ライブラリ名**:  使用目的
- **モジュール名**: 使用目的

# テンプレート終了

---

# 入力コード
{{CODE}}
`;